type Module {
    """
    Initiates a new process using the specified command and arguments, then returns the process ID.
    """
    start(command: String!, args: [String], config: ProcessConfig): Int!

    """
    Blocks until the process identified by the provided process ID exits, then returns the exit code.
    """
    waitForExit(pid: Int!): Int!

    """
    Sends a signal to the process identified by the provided process ID.
    """
    sendSignal(pid: Int!, signal: ProcessSignal!): Boolean!

    """
    Writes the provided data to the standard input of the process identified by the provided process ID.
    """
    writeStdin(pid: Int!, data: String!): Boolean!

    """
    Reads and returns the standard output of the process identified by the provided process ID.
    """
    readStdout(pid: Int!): String

    """
    Reads and returns the standard error of the process identified by the provided process ID.
    """
    readStderr(pid: Int!): String

    """
    Forcefully terminates the process identified by the provided process ID.
    """
    kill(pid: Int!): Boolean!

    """
    Attempts to gracefully terminate the process identified by the provided process ID.
    """
    terminate(pid: Int!): Boolean!

    """
    Suspends the process identified by the provided process ID.
    """
    suspend(pid: Int!): Boolean!

    """
    Resumes a previously suspended process identified by the provided process ID.
    """
    resume(pid: Int!): Boolean!

    """
    Returns the current state of the process identified by the provided process ID.
    """
    state(pid: Int!): ProcessState

    """
    If the process identified by the provided process ID has exited, returns the exit code.
    """
    exitCode(pid: Int!): Int

    """
    If the process identified by the provided process ID has exited, returns the exit reason.
    """
    exitReason(pid: Int!): String

    """
    Returns comprehensive information about the process identified by the provided process ID.
    """
    info(pid: Int!): ProcessInfo

    """
    Clears stored data for processes that have already exited.
    """
    gc: Boolean!
}

"""
Defines configuration parameters for a new process.
"""
type ProcessConfig {
    """
    Specifies the current working directory for the new process.
    """
    cwd: String

    """
    Defines the environment variables for the new process.
    """
    env: JSON

    """
    Specifies the configuration for the new process's standard input.
    """
    stdin: StdIO

    """
    Specifies the configuration for the new process's standard output.
    """
    stdout: StdIO

    """
    Specifies the configuration for the new process's standard error.
    """
    stderr: StdIO
}

"""
Defines configuration parameters for a process's IO.
"""
type StdIO {
    """
    Specifies the IO handling strategy.
    """
    strategy: IOStrategy!

    """
    Specifies the absolute file path for IO redirection. If the action is REDIRECT, the file is created if it doesn't exist. This field is ignored for other actions.
    """
    redirectFilePath: String
}

"""
Provides detailed information about a running or exited process.
"""
type ProcessInfo {
    """
    The unique identifier for the process.
    """
    pid: Int!

    """
    The command used to initiate the process.
    """
    cmd: String!

    """
    The list of arguments supplied to the process upon initialization.
    """
    args: [String]

    """
    The configuration settings used for the process.
    """
    config: ProcessConfig

    """
    The current state of the process (RUNNING, SUSPENDED, EXITED, or UNKNOWN).
    """
    state: ProcessState!

    """
    The Unix timestamp marking the start time of the process.
    """
    startTime: Int!

    """
    The total time, in milliseconds, that the process has been running.
    """
    totalTimeMs: Int!

    """
    The total CPU time, in milliseconds, utilized by the process.
    """
    totalCpuTimeMs: Int!
}

"""
Defines the strategies available for handling a process's IO.
"""
enum IOStrategy {
    """
    IO can be accessed with the methods writeStdIn, readStdOut, and readStdErr.
    """
    PIPE

    """
    IO is forwarded to the parent process.
    """
    INHERIT

    """
    IO is ignored.
    """
    IGNORE

    """
    IO is redirected to or from a specified file.
    """
    REDIRECT
}

"""
Enumerates the possible states of a process.
"""
enum ProcessState {
    """
    The process is currently executing.
    """
    RUNNING

    """
    The process is currently suspended and not executing.
    """
    SUSPENDED

    """
    The process has terminated.
    """
    EXITED

    """
    The state of the process could not be determined.
    """
    UNKNOWN
}

"""
Determines the type of signal to send to a process.
"""
enum ProcessSignal {
    """
    Hangup detected on controlling terminal or death of controlling process.
    """
    SIGHUP

    """
    Interrupt from keyboard.
    """
    SIGINT

    """
    Quit from keyboard.
    """
    SIGQUIT

    """
    Abort signal from abort(3).
    """
    SIGABRT

    """
    Kill signal.
    """
    SIGKILL

    """
    Timer signal from alarm(2).
    """
    SIGALRM

    """
    Termination signal.
    """
    SIGTERM

    """
    User-defined signal 1.
    """
    SIGUSR1

    """
    User-defined signal 2.
    """
    SIGUSR2

    """
    Continue if stopped.
    """
    SIGCONT

    """
    Stop process.
    """
    SIGSTOP

    """
    Stop typed at terminal.
    """
    SIGTSTP

    """
    Terminal input for background process.
    """
    SIGTTIN

    """
    Terminal output for background process.
    """
    SIGTTOU
}
